#!/usr/bin/python
# -*- coding: utf-8 -*-

DOCUMENTATION = """
module: jenkins-node
short_decription: Manage Jenkins nodes
description:
  - This module provides some management features to control Jenkins
    nodes.

options:
  uri:
    description:
      - Base URI for the Jenkins instance
    required: true

  username:
    description:
      - The username to log-in with.
    required: true

  password:
    description:
      - The password to log-in with.
    required: true

  operation:
    description:
      - Operation to perform
    required: false
    default: 'create'
    choices: [ create, delete, enable, disable ]

  name:
    description:
      - Node name
    required: true

  executors:
    description:
      - Number of executors in node
    required: false
    default: 2

  description:
    description:
      - Description of the node
    required: false
    default: null

  labels:
    description:
      - Labels to associate with a node, like "amd64" or "python"
    required: false
    default: null

  exclusive:
    description:
      - Mark this node for tied jobs only
    required: false
    default: 'no'
    choices: ['no', 'yes']

requirements: ['python-jenkins']
author:
    - "Alfredo Deza"

"""

EXAMPLES = """
# Create new node
- name: Create new node
  jenkins-node: uri={{ jenkins_uri }} username={{ user }} password={{ password }}
           name={{ node_name }} operation=create

# Delete an existing node
- name: Delete a node
  jenkins-node: uri={{ jenkins_uri }} username={{ user }} password={{ password }}
           name={{ node_name }} operation=delete
"""

HAS_JENKINS_API = True
try:
    import jenkins
except ImportError:
    HAS_JENKINS_API = False


def _jenkins(uri, username, password):
    return jenkins.jenkins(uri, username, password)


def create(uri, user, password, name, config=EMPTY_JOB_CONFIG):
    jenkins = _jenkins(uri, user, password)
    if name in jenkins.jobs:
        return False, "Failed to create job '%s' - already exists." % name
    jenkins.create_job(name, _clean_xml_str(config))
    if name not in jenkins:
        return False, "Failed to create job '%s'." % name
    return True, None


def delete(uri, user, password, name, config):
    j = _jenkins(uri, user, password)
    if name not in j:
        return False, "Could not delete '%s' - unknown job." % name
    j.delete_job(name)
    return True, None


def enable(uri, user, password, name, config):
    j = _jenkins(uri, user, password)
    if name not in j:
        return False, "Could not enable '%s' - unknown job." % name
    job = j[name]
    if job.is_enabled():
        return False, "Job already enabled"
    else:
        job.enable()
        return True, None


def disable(uri, user, password, name, config):
    j = _jenkins(uri, user, password)
    if name not in j:
        return False, "Could not disable '%s' - unknown job." % name
    job = j[name]
    if job.is_enabled():
        job.disable()
        return True, None
    else:
        return False, "Job already disabled"


def modify(uri, user, pasword, name, config):
    j = _jenkins(uri, user, pasword)
    if name not in j:
        return False, "Could not modify '%s' - unknown job." % name
    job = j[name]
    job.update_config(_clean_xml_str(config))
    return True, None


def main():
    module = AnsibleModule(
        argument_spec=dict(
            uri=dict(required=True),
            username=dict(required=True),
            password=dict(required=True),
            operation=dict(default='create', choices=['create', 'delete', 'enable', 'disable']),
            name=dict(required=True),
            executors=dict(required=False, default=2),
            description=dict(required=False, default=None),
            labels=dict(required=False, default=None),
            exclusive=dict(required=False, default=False, choices=[False, True]),
            )
        ),
        supports_check_mode=False
    )

    if not HAS_JENKINS_API:
        module.fail_json(msg="Could not import python modules: jenkins. Please install jenkins package.")

    uri = module.params['uri']
    username = module.params['username']
    password = module.params['password']
    name = module.params['name']
    config_params = module.params['config_params']
    config = module.params['config']

    config_str = template.template_from_file(None, config, config_params)
    try:
        op = module.params['operation']
        thismodule = sys.modules[__name__]
        method = getattr(thismodule, op)
        changed, msg = method(uri, username, password, name, config_str)
        args = {'changed': changed}
        if msg:
            args['msg'] = msg
        module.exit_json(**args)
    except Exception as ex:
        return module.fail_json(msg=ex.message)


# yep, everything: https://docs.ansible.com/developing_modules.html#common-module-boilerplate
from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()
